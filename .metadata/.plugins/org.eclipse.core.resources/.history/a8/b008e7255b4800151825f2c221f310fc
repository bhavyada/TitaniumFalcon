//============================================================================
// Name        : Delete_particular_node.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

// This program is to delete a particular node in a linked given a pointer to that linked list without
// passing the header.

#include<stdio.h>
#include<iostream>
#include<stdlib.h>

//Link list node
struct Node
{
    int Data;
    struct Node* Next;
};

/* Given a reference (pointer to pointer) to the head
of a list and an int, push a new node on the front
of the list. */
void push(struct node** head_ref, int new_data)
{
    /* allocate node */
   struct Node* new_node =
             (struct Node*) malloc(sizeof(struct Node));

   /* put in the data  */
   new_node->Data  = new_data;

   /* link the new_node->Next to the old list which head was pointing to */
   new_node->Next = (*head_ref);

   /* move the head to point to the new node */
   (*head_ref)    = new_node;
}

void printList(struct node *head)
{
   struct Node *temp = head;
   while(temp != NULL)
   {
      printf("%d  ", temp->Data);
      temp = temp->Next;
   }
}

void deleteNode(struct Node *node_ptr)// suppose node_ptr = 4
{
   struct Node* temp = node_ptr->Next;// temp = 5
   node_ptr->Data = temp->Data; //data =5
   node_ptr->Next = temp->Next;
   free(temp);
}

/* Drier program to test above function*/
int main()
{
    /* Start with the empty list */
    struct Node* head = NULL;

    /* Use push() to construct below list
    1->2->3->4->5  */
    push(&head, 5);
    push(&head, 4);
    push(&head, 3);
    push(&head, 2);
    push(&head, 1);

    printf("\n Before deleting \n");
    printList(head);

    /* I m deleting the head itself.
        You can check for more cases */
   deleteNode(head->Next->Next);

   printf("\n After deleting \n");
   printList(head);

}
